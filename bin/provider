#!/usr/bin/env ruby
require 'rubygems'
require 'controller'
require 'provider'
require 'optparse'

options = {}
optparse = OptionParser.new do |opts|
  opts.banner = "Usage: provider -b BROWSER_TYPE [options]"
  opts.separator ""
  opts.separator "Specific options:"
  opts.on("-b", "--browser-type TYPE",
  "Specify driver for browser type to register {watir|firewatir|safariwatir|webdriver|zombie}") do |b|
    options[:browser_type] = b
  end
  opts.on("-c", "--controller-uri [URI]",
  "Specify Controller URI e.g. druby://127.0.0.1:11235") do |h|
    options[:controller_uri] = h || nil
  end
  opts.on("-H", "--drb-server-host [HOST]",
  "Specify DRb Server interface to host on") do |h|
    options[:drb_server_host] = h || nil
  end
  opts.on("-d", "--drb-server-port [PORT]",
    "Specify DRb Server port to listen on") do |d|
      options[:drb_server_port] = d
  end
  opts.on("-h", "--ring-server-host [HOST]",
  "Specify Ring Server host to connect to") do |h|
    options[:ring_server_host] = h || nil
  end
  opts.on("-r", "--ring-server-port [PORT]",
  "Specify Ring Server port to broadcast on") do |r|
    options[:ring_server_port] = r
  end
  opts.on("-a", "--access-control-list [ACL]", Array,
    "Specify a comma separated Access Control List") do |a|
      options[:acls] = a
  end
  opts.on("-l", "--log-level [LEVEL]",
  "Specify log level {DEBUG|INFO|ERROR}") do |l|
    case l
    when 'DEBUG'
      options[:loglevel] = Logger::DEBUG
    when 'INFO'
      options[:loglevel] = Logger::INFO
    when 'ERROR'
      options[:loglevel] = Logger::ERROR
    else
      options[:loglevel] = Logger::ERROR
    end
  end
  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end

begin
  optparse.parse!
  mandatory = [:browser_type]
  missing = mandatory.select{ |param| options[param].nil? }
  if not missing.empty?
    puts "Missing options: #{missing.join(', ')}"
    puts optparse
    exit
  end
rescue OptionParser::InvalidOption, OptionParser::MissingArgument
  puts $!.to_s
  puts optparse
  exit
end

provider = Provider.new(
  :drb_server_host  => options[:drb_server_host],
  :drb_server_port  => options[:drb_server_port]  || 11236,
  :ring_server_host => options[:ring_server_host],
  :ring_server_port => options[:ring_server_port] || 12358,
  :browser_type     => options[:browser_type] || nil,
  :controller_uri   => options[:controller_uri] || nil,
  :acls             => options[:acls] || %w{ allow all },
  :loglevel         => options[:loglevel])
provider.start
DRb.thread.join
